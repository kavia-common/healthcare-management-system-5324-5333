{"is_source_file": true, "format": "Python", "description": "This file defines FastAPI routes for managing medical records, including CRUD operations, user authentication, and database interactions in a healthcare management system.", "external_files": ["src.api.auth", "src.api.db", "src.api.models"], "external_methods": ["decode_token", "get_db", "convert_object_ids", "to_object_id"], "published": ["create_medical_record", "list_medical_records", "get_medical_record"], "classes": [], "methods": [{"name": "Dict[str,Any] get_current_user(token: str = Depends(oauth2_scheme))", "description": "Decodes JWT token to retrieve user claims or raises 401 if invalid.", "scope": "", "scopeKind": ""}, {"name": "_records(db: AsyncIOMotorDatabase)", "description": "Accesses the 'medical_records' collection in the database.", "scope": "", "scopeKind": ""}, {"name": "_patients(db: AsyncIOMotorDatabase)", "description": "Accesses the 'patients' collection in the database.", "scope": "", "scopeKind": ""}, {"name": "_doctors(db: AsyncIOMotorDatabase)", "description": "Accesses the 'doctors' collection in the database.", "scope": "", "scopeKind": ""}, {"name": "Any create_medical_record( payload: MedicalRecordCreate, user: Dict[str, Any] = Depends(get_current_user), db: AsyncIOMotorDatabase = Depends(get_db), )", "description": "Creates a new medical record for a patient by a doctor, validating permissions and data.", "scope": "", "scopeKind": ""}, {"name": "Any list_medical_records( user: Dict[str, Any] = Depends(get_current_user), db: AsyncIOMotorDatabase = Depends(get_db), skip: int = Query(0, ge=0), limit: int = Query(50, ge=1, le=200), )", "description": "Lists medical records accessible to the current user, with pagination support.", "scope": "", "scopeKind": ""}, {"name": "Any get_medical_record( id: str = Path(..., description=\"Medical record id\"), user: Dict[str, Any] = Depends(get_current_user), db: AsyncIOMotorDatabase = Depends(get_db), )", "description": "Retrieves a specific medical record by its ID with permission checks.", "scope": "", "scopeKind": ""}], "calls": ["decode_token", "get_db", "convert_object_ids", "to_object_id", "patients.find_one", "doctors.find_one", "coll.insert_one", "coll.find_one", "coll.find", "coll.find_one"], "search-terms": ["medical_records", "FastAPI routes", "JWT authentication", "MongoDB motor", "create_medical_record", "list_medical_records", "get_medical_record"], "state": 2, "file_id": 14, "knowledge_revision": 31, "git_revision": "", "ctags": [{"_type": "tag", "name": "_doctors", "path": "/home/kavia/workspace/code-generation/healthcare-management-system-5324-5333/fastapi_backend/src/api/routes/medical_records.py", "pattern": "/^async def _doctors(db: AsyncIOMotorDatabase):$/", "language": "Python", "kind": "function", "signature": "(db: AsyncIOMotorDatabase)"}, {"_type": "tag", "name": "_patients", "path": "/home/kavia/workspace/code-generation/healthcare-management-system-5324-5333/fastapi_backend/src/api/routes/medical_records.py", "pattern": "/^async def _patients(db: AsyncIOMotorDatabase):$/", "language": "Python", "kind": "function", "signature": "(db: AsyncIOMotorDatabase)"}, {"_type": "tag", "name": "_records", "path": "/home/kavia/workspace/code-generation/healthcare-management-system-5324-5333/fastapi_backend/src/api/routes/medical_records.py", "pattern": "/^async def _records(db: AsyncIOMotorDatabase):$/", "language": "Python", "kind": "function", "signature": "(db: AsyncIOMotorDatabase)"}, {"_type": "tag", "name": "create_medical_record", "path": "/home/kavia/workspace/code-generation/healthcare-management-system-5324-5333/fastapi_backend/src/api/routes/medical_records.py", "pattern": "/^async def create_medical_record($/", "language": "Python", "typeref": "typename:Any", "kind": "function", "signature": "( payload: MedicalRecordCreate, user: Dict[str, Any] = Depends(get_current_user), db: AsyncIOMotorDatabase = Depends(get_db), )"}, {"_type": "tag", "name": "get_current_user", "path": "/home/kavia/workspace/code-generation/healthcare-management-system-5324-5333/fastapi_backend/src/api/routes/medical_records.py", "pattern": "/^async def get_current_user(token: str = Depends(oauth2_scheme)) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "(token: str = Depends(oauth2_scheme))"}, {"_type": "tag", "name": "get_medical_record", "path": "/home/kavia/workspace/code-generation/healthcare-management-system-5324-5333/fastapi_backend/src/api/routes/medical_records.py", "pattern": "/^async def get_medical_record($/", "language": "Python", "typeref": "typename:Any", "kind": "function", "signature": "( id: str = Path(..., description=\"Medical record id\"), user: Dict[str, Any] = Depends(get_current_user), db: AsyncIOMotorDatabase = Depends(get_db), )"}, {"_type": "tag", "name": "list_medical_records", "path": "/home/kavia/workspace/code-generation/healthcare-management-system-5324-5333/fastapi_backend/src/api/routes/medical_records.py", "pattern": "/^async def list_medical_records($/", "language": "Python", "typeref": "typename:Any", "kind": "function", "signature": "( user: Dict[str, Any] = Depends(get_current_user), db: AsyncIOMotorDatabase = Depends(get_db), skip: int = Query(0, ge=0), limit: int = Query(50, ge=1, le=200), )"}, {"_type": "tag", "name": "oauth2_scheme", "path": "/home/kavia/workspace/code-generation/healthcare-management-system-5324-5333/fastapi_backend/src/api/routes/medical_records.py", "pattern": "/^oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"\\/auth\\/login\", scheme_name=\"JWT\")$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/healthcare-management-system-5324-5333/fastapi_backend/src/api/routes/medical_records.py", "pattern": "/^router = APIRouter($/", "language": "Python", "kind": "variable"}], "hash": "b48eed14083dc92e4e6adbb5c7750d7a", "format-version": 4, "code-base-name": "fastapi_backend", "filename": "fastapi_backend/src/api/routes/medical_records.py", "fields": [{"name": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"\\/auth\\/login\", scheme_name=\"JWT\")", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "router = APIRouter(", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"31": ""}]}